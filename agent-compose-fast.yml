services:
  ai-agent:
    image: node:18
    working_dir: /workspace
    volumes:
      - ${WORKTREE_PATH:-./}:/workspace:rw
      - ${CONTEXT_PATH:-./.context}:/context:ro
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - WORKSPACE=/workspace
      - ISSUE_NUMBER=${ISSUE_NUMBER:-2}
      - GITHUB_KEY=${GITHUB_KEY:-}
      - TASK_MSG=${TASK_MSG:-}
    command:
      - bash
      - -c
      - |
        # Use task from environment variable or create default
        if [ -n "$$TASK_MSG" ]; then
          echo "‚úÖ Task from environment variable:"
          echo "üìÑ TASK_MSG: [$$TASK_MSG]"
        elif [ -f "/context/task.txt" ]; then
          echo "‚úÖ Task file found, reading content:"
          echo "üìÑ RAW FILE CONTENT:"
          cat /context/task.txt
          echo ""
          TASK_MSG=$$(cat /context/task.txt)
          echo "üìÑ VARIABLE CONTENT: [$$TASK_MSG]"
        else
          echo "‚ö†Ô∏è No task specified, using default task"
          TASK_MSG="Modify some random file adding a comment and commit the changes and push it to the repo as a new pr, Commit your changes with conventional commits referencing #2"
        fi
        
        # Install GitHub CLI, curl and create claude user
        apt-get update && apt-get install -y gh curl sudo
        useradd -m -s /bin/bash claude || echo "User claude already exists"
        
        # Fix ownership of entire workspace BEFORE git operations
        chown -R claude:claude /workspace
        echo "‚úÖ User claude created and workspace permissions set"
        git config --global --add safe.directory /workspace
        git config --global --add safe.directory '*'
        git config --global user.name "AI Agent"
        git config --global user.email "ai-agent@americanservices.tech"
        
        # Setup GitHub CLI authentication 
        echo "$GITHUB_KEY" | gh auth login --with-token
        echo "üîê GitHub authentication test:"
        gh auth status || echo "‚ö†Ô∏è GitHub CLI auth failed"
        
        # Configure git to use GitHub CLI for authentication
        gh auth setup-git

        # Debug: show current environment
        cd /workspace
        echo "üîç DEBUG: Current environment and git setup"
        echo "Current directory: $(pwd)"
        echo "Contents:"
        ls -la
        echo "Git status:"
        if [ -f .git ]; then
          echo ".git is a FILE (worktree pointer) - converting to fresh repo..."
          # Remove the worktree pointer and create fresh git repo
          rm .git
          git init
          echo "‚úÖ Initialized fresh git repository"
          
          # Add remote (assuming GitHub repo based on the workflow)
          echo "üîó Adding remote origin..."
          git remote add origin https://github.com/americanservices/factory_floor.git || echo "‚ùå Failed to add remote"
          
          # Verify remote was added
          echo "üîç Checking remotes:"
          git remote -v
          
          # Fetch all branches
          echo "üì• Fetching branches from remote..."
          git fetch origin || echo "‚ùå Failed to fetch from remote"
          echo "‚úÖ Fetch completed"
          
          # Determine branch name from issue number or directory name
          if [ -n "$ISSUE_NUMBER" ]; then
            # Try to find existing branch or create new one
            BRANCH_NAME=$(git branch -r | grep -E "(feat|fix).*$ISSUE_NUMBER" | head -1 | sed 's|origin/||' | tr -d ' ')
            if [ -z "$BRANCH_NAME" ]; then
              # Create new branch name based on issue
              BRANCH_NAME="fix/issue-$ISSUE_NUMBER-autonomous"
              git checkout -b "$BRANCH_NAME" origin/master
              echo "‚úÖ Created new branch: $BRANCH_NAME"
            else
              git checkout -b "$BRANCH_NAME" "origin/$BRANCH_NAME"
              echo "‚úÖ Checked out existing branch: $BRANCH_NAME"
            fi
          else
            # Fallback to master
            git checkout -b "autonomous-work" origin/master
            echo "‚úÖ Checked out master as autonomous-work branch"
          fi
        elif [ -d .git ]; then
          echo ".git is a DIRECTORY - git repo already exists"
        else
          echo ".git does not exist - initializing fresh repo..."
          git init
          git remote add origin https://github.com/americanservices/factory_floor.git
          git fetch origin
          git checkout -b "autonomous-work" origin/master
          echo "‚úÖ Initialized fresh git repository and checked out master"
        fi
        echo "Environment variables:"
        echo "  WORKTREE_PATH: ${WORKTREE_PATH:-not_set}"
        echo "  CONTEXT_PATH: ${CONTEXT_PATH:-not_set}"  
        echo "  ISSUE_NUMBER: ${ISSUE_NUMBER:-not_set}"
        echo "  GITHUB_TOKEN: ${GITHUB_TOKEN:-not_set}"
        echo ""
        
        echo "üîß Finalizing git setup for container..."
        
        # Configure safe directories after fixing the worktree pointer
        git config --global --add safe.directory /workspace
        
        echo "üîó Verifying git remote..."
        git remote -v || echo "No remotes found"
        
        echo "üîç Checking current git status..."
        git status || echo "Git status failed"
        git branch -a || echo "Branch listing failed"
        
        echo "‚úÖ Git repository ready"
        
        # After Claude finishes, ensure git user is configured
        git config user.name "AI Agent"
        git config user.email "ai-agent@americanservices.tech"
        echo "‚úÖ Git user configured"
        
        # Ensure remote is configured for push
        echo "üîó Verifying remote configuration for push..."
        if ! git remote get-url origin 2>/dev/null; then
          echo "üîó Adding remote origin for push..."
          git remote add origin https://github.com/americanservices/factory_floor.git
        fi
        git remote -v
        echo "‚úÖ Remote configured for push"
        
        # Get current branch name to preserve it
        ORIGINAL_BRANCH=$(git branch --show-current 2>/dev/null || echo "master")
        echo "üîç DEBUG: Issue number from environment: [$${ISSUE_NUMBER:-EMPTY}]"
        echo "üîç DEBUG: Original branch: $$ORIGINAL_BRANCH"
        
        # Create proper branch name based on issue
        BRANCH_NAME="fix/issue-$${ISSUE_NUMBER:-2}-autonomous"
        echo "üîç DEBUG: Target branch: $$BRANCH_NAME"
        
        # Always create/recreate branch from master to ensure common history
        echo "üîÑ Creating/recreating $$BRANCH_NAME from master..."
        git fetch origin master
        git reset --hard origin/master
        git checkout -B "$$BRANCH_NAME"
        echo "‚úÖ Branch created from master base with full history"
        
        # Execute the actual task (TASK_MSG was set above)
        echo "ü§ñ Executing task: $$TASK_MSG"

        echo ""
        echo "üöÄ Starting Claude with task..."
        echo "üìÑ Task: $$TASK_MSG"
        echo ""
        
        # Since we can't use Claude Code with --dangerously-skip-permissions as root,
        # we'll implement the task directly with git commands for autonomous operation
        echo "ü§ñ Implementing task autonomously..."
        su - claude -c "cd /workspace && ANTHROPIC_API_KEY='$$ANTHROPIC_API_KEY' GITHUB_TOKEN='$$GITHUB_TOKEN' GH_TOKEN='$$GITHUB_TOKEN' npx --yes @anthropic-ai/claude-code@1.0.70 --dangerously-skip-permissions -p \"$$TASK_MSG\"" && echo "‚úÖ Claude Code execution completed" || echo "‚ùå Claude Code execution failed"
        
        # For now, implement basic file modification as requested
        echo "# Task: $$TASK_MSG" >> task_implementation.md
        echo "# Completed by AI Agent - $(date)" >> task_implementation.md
        echo "‚úÖ Task implementation completed"
        
        # Stage all changes (worktree files + our modification)
        git add .
        echo "‚úÖ Staged all changes"
        
        # Create commit with conventional commit format
        git commit -m "feat: implement changes for issue #$${ISSUE_NUMBER:-2}

        ü§ñ Generated with Claude Code
        
        Co-Authored-By: Claude <noreply@anthropic.com>"
        echo "‚úÖ Created commit"
        
        # Try git push now that gh auth setup-git was run
        echo "üì§ Pushing branch with git (using gh credentials)..."
        git push --force --set-upstream origin "$$BRANCH_NAME" 2>&1 && echo "‚úÖ Push successful" || echo "‚ùå Push failed"
        
        # Create PR
        echo "üìã Creating pull request..."
        gh repo set-default americanservices/factory_floor
        gh pr create --title "feat: implement changes for issue #$${ISSUE_NUMBER:-2}" --body "Automated PR created by AI agent to resolve issue #$${ISSUE_NUMBER:-2}." --head "$$BRANCH_NAME" --base master --repo americanservices/factory_floor 2>&1 && echo "‚úÖ PR created successfully" || echo "‚ùå PR creation failed"
        
        echo "‚úÖ Workflow completed"
        
        echo "üîó Checking if PR was created..."
        gh pr list --head "$$BRANCH_NAME" 2>&1 || echo "‚ùå No PR found for this branch"
        
        echo "‚úÖ Autonomous workflow completed"
    stdin_open: false
    tty: false